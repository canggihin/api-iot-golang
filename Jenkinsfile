pipeline {
    agent any
    
    environment {
        IMAGE_NAME = 'argyarijal/mqtt-client-ta:latest'
        CONTAINER_NAME = 'service-mqtt-golang'
        BRANCH_NAME = "main"
        MSG_COMMIT = sh(script: "git log -1 --pretty=%B ${env.GIT_COMMIT}", returnStdout: true).trim()
    }
    
    stages {
        stage('who am i') {
            steps {
                sh 'whoami'
            }
        }
        stage('Skip pattern') {
            steps {
                script {
                    if (MSG_COMMIT == 'generated by jenkins') {
                        echo 'Build Canceled'
                        currentBuild.result = 'ABORTED'
                        throw new Exception()
                    }
                }
            }
        }

        stage('Remove Docker Compose') {
            steps {
                script {
                    sh '''
                    docker compose down --remove-orphans -v
                    '''
                }
            }
        }

        stage('Docker Build and Push') {
            steps {
                withDockerRegistry([credentialsId: "docker-creds", url: ""]) {
                    retry(3) {
                        timeout(time: 25, unit: 'MINUTES') {
                            sh 'printenv'
                            sh 'DOCKER_BUILDKIT=1 docker build --rm=false -t ${IMAGE_NAME} .'
                            sh 'docker push ${IMAGE_NAME}'
                        }
                    }
                }
            }
        }

        stage('Prune Docker Data') {
            steps {
                sh 'docker system prune -a --volumes -f'
                // Stop and remove the old container if it exists
                sh '''
                if [ $(docker ps -a -q -f name=${CONTAINER_NAME}) ]; then
                    docker stop ${CONTAINER_NAME} || true
                    docker rm ${CONTAINER_NAME} || true
                fi
                '''
            }
        }
        stage('Deploy') {
            steps {
                script {
                    
                    // Pull the latest image
                    sh 'docker pull ${IMAGE_NAME}'

                    // Run the new container with the correct volume mount
                    sh '''
                    docker compose up -d
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Build and deployment successful!'
            discordSend (
                webhookURL: "https://discord.com/api/webhooks/1244675279239254077/OBqglM-TvJsGJ-PJdxxthw0-mkEzkFPJb4phGpDIBvd0jSpnJ_HyZeNc6C8ML3lJnR9Y",
                title: "${JOB_NAME}",
                description: "Build Success \n - Link Build : ${env.BUILD_URL} \n - Image : `${env.IMAGE_NAME}` \n - Branch Name : `${env.BRANCH_NAME}` \n - Commit MSG : `${MSG_COMMIT}`",
                result: currentBuild.currentResult.toString(),
                footer: "Footer Text"
            )
        }

        failure {
            echo 'Build or deployment failed!'
            discordSend (
                webhookURL: "https://discord.com/api/webhooks/1244675279239254077/OBqglM-TvJsGJ-PJdxxthw0-mkEzkFPJb4phGpDIBvd0jSpnJ_HyZeNc6C8ML3lJnR9Y",
                title: "${JOB_NAME}",
                description: "Build Failed \n - Link Build : ${env.BUILD_URL} \n - Image : `${env.IMAGE_NAME}` \n - Branch Name : `${env.BRANCH_NAME}` \n - Commit MSG : `${MSG_COMMIT}`",
                result: currentBuild.currentResult.toString(),
                footer: "Footer Text"
            )
        }
    }
}
